/*
    Copywrite 2015 Will Winder

    This file is part of Universal Gcode Sender (UGS).

    UGS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    UGS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with UGS.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.willwinder.ugs.nbp.console;

import com.willwinder.ugs.nbp.lookup.CentralLookup;
import com.willwinder.universalgcodesender.i18n.Localization;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.BackendAPIReadOnly;
import com.willwinder.universalgcodesender.listeners.ControllerListener;
import com.willwinder.universalgcodesender.types.GcodeCommand;
import com.willwinder.universalgcodesender.utils.Settings;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPopupMenu;
import javax.vecmath.Point3d;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.willwinder.universalgcodesender.nbp.console//SerialConsole//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SerialConsoleTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "com.willwinder.universalgcodesender.nbp.console.SerialConsoleTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SerialConsoleAction",
        preferredID = "SerialConsoleTopComponent"
)
@Messages({
    "CTL_SerialConsoleAction=SerialConsole",
    "CTL_SerialConsoleTopComponent=SerialConsole Window",
    "HINT_SerialConsoleTopComponent=This is a SerialConsole window"
})
public final class SerialConsoleTopComponent extends TopComponent implements ControllerListener, MouseListener {

    static String verboseString = "[" + Localization.getString("verbose") + "] ";
    
    BackendAPIReadOnly backend;
    Settings settings;
    
    JPopupMenu menu = new JPopupMenu();
    JCheckBoxMenuItem verboseMenuItem = new JCheckBoxMenuItem("Show verbose messages.");
    
    public SerialConsoleTopComponent() {
        initComponents();
        setName(Bundle.CTL_SerialConsoleTopComponent());
        setToolTipText(Bundle.HINT_SerialConsoleTopComponent());
        
        menu.add(verboseMenuItem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setMaximumSize(new java.awt.Dimension(32767, 32767));
        consoleTextArea.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(consoleTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        settings = CentralLookup.getDefault().lookup(Settings.class);
        
        verboseMenuItem.setSelected(settings.isVerboseOutputEnabled());

        backend.addControllerListener(this);
        this.consoleTextArea.addMouseListener(this);
        
        final Preferences pref = NbPreferences.forModule(ConsolePanel.class);

        // Listen for prefernce changes.
        pref.addPreferenceChangeListener(new PreferenceChangeListener() {
            public void preferenceChange(PreferenceChangeEvent evt) {
                if (evt.getKey().equals("verboseCheckbox")) {
                    verboseMenuItem.setSelected(pref.getBoolean("verboseCheckbox", false));
                }
            }
        });
    }

    @Override
    public void componentClosed() {
        settings.setVerboseOutputEnabled(verboseMenuItem.isSelected());
        NbPreferences.forModule(ConsolePanel.class).putBoolean("verboseCheckbox", verboseMenuItem.isSelected());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void fileStreamComplete(String string, boolean bln) {
    }

    @Override
    public void commandQueued(GcodeCommand gc) {
    }

    @Override
    public void commandSent(GcodeCommand gc) {
    }

    @Override
    public void commandComplete(GcodeCommand gc) {
    }

    @Override
    public void commandComment(String string) {
    }

    @Override
    public void messageForConsole(final String msg, final Boolean verbose) {
        if (!verbose || verboseMenuItem.isSelected()) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    consoleTextArea.append((verbose ? verboseString : "") + msg);

                    if (consoleTextArea.isVisible()) {
                        consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
                    }
                }
            });
        }
    }

    @Override
    public void statusStringListener(String string, Point3d pntd, Point3d pntd1) {
    }

    @Override
    public void postProcessData(int i) {
    }

    // All this to show a right click popup!
    private void doPop(MouseEvent e){
        menu.show(e.getComponent(), e.getX(), e.getY());
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.isPopupTrigger())
            doPop(e);
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if (e.isPopupTrigger())
            doPop(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger())
            doPop(e);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        if (e.isPopupTrigger())
            doPop(e);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        if (e.isPopupTrigger())
            doPop(e);
    }
}
