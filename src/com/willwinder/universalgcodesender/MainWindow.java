/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Jun 26, 2012, 3:04:38 PM
 */
package com.willwinder.universalgcodesender;

import gnu.io.CommPortIdentifier;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

/**
 *
 * @author wwinder
 */
public class MainWindow extends javax.swing.JFrame 
implements SerialCommunicatorListener, KeyListener {

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        initProgram();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lineBreakGroup = new ButtonGroup();
        jTabbedPane1 = new JTabbedPane();
        jPanel1 = new JPanel();
        lineBreakNR = new JRadioButton();
        lineBreakRN = new JRadioButton();
        commPortComboBox = new JComboBox();
        refreshButton = new JButton();
        openButton = new JButton();
        closeButton = new JButton();
        lineBreakN = new JRadioButton();
        scrollWindowCheckBox = new JCheckBox();
        jPanel2 = new JPanel();
        browseButton = new JButton();
        sendButton = new JButton();
        pauseButton = new JButton();
        fileTextField = new JTextField();
        fileLabel = new JLabel();
        overrideSpeedCheckBox = new JCheckBox();
        overrideSpeedValueSpinner = new JSpinner();
        sentRowsLabel = new JLabel();
        sentRowsValueLabel = new JLabel();
        rowsLabel = new JLabel();
        rowsValueLabel = new JLabel();
        durationLabel = new JLabel();
        durationValueLabel = new JLabel();
        cancelButton = new JButton();
        jTabbedPane2 = new JTabbedPane();
        jScrollPane2 = new JScrollPane();
        consoleTextArea = new JTextArea();
        jScrollPane1 = new JScrollPane();
        commandTable = new JTable();
        jPanel3 = new JPanel();
        commandTextField = new JTextField();
        commandLabel = new JLabel();
        jPanel4 = new JPanel();
        btnXB10 = new JButton();
        btnXB5 = new JButton();
        btnXB1 = new JButton();
        btnXR1 = new JButton();
        btnXR5 = new JButton();
        btnXR10 = new JButton();
        btnXL1 = new JButton();
        btnXL5 = new JButton();
        btnXL10 = new JButton();
        btnXT1 = new JButton();
        btnXT5 = new JButton();
        btnXT10 = new JButton();
        btnSpindleOn = new JButton();
        btnSpindleOff = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(BorderFactory.createTitledBorder("Serial"));

        lineBreakGroup.add(lineBreakNR);
        lineBreakNR.setText("\\n\\r");
        lineBreakNR.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lineBreakNRActionPerformed(evt);
            }
        });

        lineBreakGroup.add(lineBreakRN);
        lineBreakRN.setSelected(true);
        lineBreakRN.setText("\\r\\n");
        lineBreakRN.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lineBreakRNActionPerformed(evt);
            }
        });

        refreshButton.setIcon(new ImageIcon(getClass().getResource("/refresh.gif"))); // NOI18N
        refreshButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.setEnabled(false);
        closeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        lineBreakGroup.add(lineBreakN);
        lineBreakN.setText("\\n");
        lineBreakN.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lineBreakNActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(commPortComboBox, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(refreshButton, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(openButton)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(closeButton)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lineBreakN)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(lineBreakNR)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(lineBreakRN)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(lineBreakNR)
                        .add(lineBreakRN)
                        .add(lineBreakN))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(refreshButton, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                            .add(commPortComboBox, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                                .add(openButton, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                .add(closeButton, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrollWindowCheckBox.setSelected(true);
        scrollWindowCheckBox.setText("Scroll output window");
        scrollWindowCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                scrollWindowCheckBoxActionPerformed(evt);
            }
        });

        jPanel2.setBorder(BorderFactory.createTitledBorder("File transfer"));

        browseButton.setText("Browse");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        fileTextField.setEnabled(false);

        fileLabel.setText("File");

        overrideSpeedCheckBox.setText("Override speed");
        overrideSpeedCheckBox.setEnabled(false);
        overrideSpeedCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                overrideSpeedCheckBoxActionPerformed(evt);
            }
        });

        overrideSpeedValueSpinner.setModel(new SpinnerNumberModel(Integer.valueOf(60), Integer.valueOf(1), null, Integer.valueOf(1)));
        overrideSpeedValueSpinner.setEnabled(false);

        sentRowsLabel.setText("Sent rows:");

        sentRowsValueLabel.setText("0");

        rowsLabel.setText("Rows:");

        rowsValueLabel.setText("0");

        durationLabel.setText("Duration:");

        durationValueLabel.setText("00:00:00");

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(fileTextField, GroupLayout.DEFAULT_SIZE, 400, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(browseButton))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(fileLabel)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(sentRowsLabel)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(sentRowsValueLabel)
                                .add(49, 49, 49)
                                .add(rowsLabel)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(rowsValueLabel)
                                .add(46, 46, 46)
                                .add(durationLabel)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(durationValueLabel))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(sendButton, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(pauseButton, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(cancelButton)
                                .add(18, 18, 18)
                                .add(overrideSpeedValueSpinner, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(overrideSpeedCheckBox)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(fileLabel)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(fileTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(sendButton)
                    .add(pauseButton)
                    .add(overrideSpeedCheckBox)
                    .add(overrideSpeedValueSpinner, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton))
                .add(14, 14, 14)
                .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(durationValueLabel)
                        .add(durationLabel))
                    .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(sentRowsLabel)
                        .add(sentRowsValueLabel)
                        .add(rowsLabel)
                        .add(rowsValueLabel)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane2.setViewportView(consoleTextArea);

        jTabbedPane2.addTab("Console", jScrollPane2);

        commandTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Command", "Sent", "Done", "Response"
            }
        ) {
            Class[] types = new Class [] {
                String.class, Boolean.class, Boolean.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        commandTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(commandTable);
        commandTable.getColumnModel().getColumn(0).setPreferredWidth(500);
        commandTable.getColumnModel().getColumn(1).setResizable(false);
        commandTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        commandTable.getColumnModel().getColumn(2).setResizable(false);
        commandTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        commandTable.getColumnModel().getColumn(3).setPreferredWidth(350);

        jTabbedPane2.addTab("File Commands", jScrollPane1);

        jPanel3.setBorder(BorderFactory.createTitledBorder("Controller"));

        commandTextField.setEnabled(false);
        commandTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                commandTextFieldActionPerformed(evt);
            }
        });

        commandLabel.setText("Command");

        btnXB10.setLabel("10");
        btnXB10.setMargin(new Insets(2, 2, 2, 2));
        btnXB10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXB10ActionPerformed(evt);
            }
        });

        btnXB5.setLabel("5");
        btnXB5.setMargin(new Insets(2, 2, 2, 2));
        btnXB5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXB5ActionPerformed(evt);
            }
        });

        btnXB1.setLabel("1");
        btnXB1.setMargin(new Insets(2, 2, 2, 2));
        btnXB1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXB1ActionPerformed(evt);
            }
        });

        btnXR1.setLabel("1");
        btnXR1.setMargin(new Insets(2, 2, 2, 2));
        btnXR1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXR1ActionPerformed(evt);
            }
        });

        btnXR5.setLabel("5");
        btnXR5.setMargin(new Insets(2, 2, 2, 2));
        btnXR5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXR5ActionPerformed(evt);
            }
        });

        btnXR10.setLabel("10");
        btnXR10.setMargin(new Insets(2, 2, 2, 2));
        btnXR10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXR10ActionPerformed(evt);
            }
        });

        btnXL1.setLabel("1");
        btnXL1.setMargin(new Insets(2, 2, 2, 2));
        btnXL1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXL1ActionPerformed(evt);
            }
        });

        btnXL5.setLabel("5");
        btnXL5.setMargin(new Insets(2, 2, 2, 2));
        btnXL5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXL5ActionPerformed(evt);
            }
        });

        btnXL10.setLabel("10");
        btnXL10.setMargin(new Insets(2, 2, 2, 2));
        btnXL10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXL10ActionPerformed(evt);
            }
        });

        btnXT1.setLabel("1");
        btnXT1.setMargin(new Insets(2, 2, 2, 2));
        btnXT1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXT1ActionPerformed(evt);
            }
        });

        btnXT5.setLabel("5");
        btnXT5.setMargin(new Insets(2, 2, 2, 2));
        btnXT5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXT5ActionPerformed(evt);
            }
        });

        btnXT10.setLabel("10");
        btnXT10.setMargin(new Insets(2, 2, 2, 2));
        btnXT10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXT10ActionPerformed(evt);
            }
        });

        btnSpindleOn.setText("Spindle On");
        btnSpindleOn.setMargin(new Insets(2, 2, 2, 2));
        btnSpindleOn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSpindleOnActionPerformed(evt);
            }
        });

        btnSpindleOff.setText("Spindle Off");
        btnSpindleOff.setMargin(new Insets(2, 2, 2, 2));
        btnSpindleOff.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSpindleOffActionPerformed(evt);
            }
        });

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(btnXL10, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXL5, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXL1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(btnXB1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(btnXR1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(btnXR5, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(btnXR10, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                    .add(btnXB5, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                    .add(btnXB10, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(btnXT5, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnSpindleOff, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE))
                    .add(btnXT1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(btnXT10, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnSpindleOn, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(btnXT10)
                    .add(btnSpindleOn))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(btnXT5)
                    .add(btnSpindleOff))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXT1)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(btnXL10)
                    .add(btnXR5)
                    .add(btnXL1)
                    .add(btnXL5)
                    .add(btnXR1)
                    .add(btnXR10))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXB1)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXB5)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(btnXB10)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(commandTextField)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(commandLabel)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .add(GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .add(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .add(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(commandLabel)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(commandTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(jTabbedPane2)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .add(scrollWindowCheckBox))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(scrollWindowCheckBox)))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jTabbedPane2, GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** End of generated code.
     */
    
    /** Generated callback functions, hand coded.
     */
    private void scrollWindowCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_scrollWindowCheckBoxActionPerformed
        checkScrollWindow();
    }//GEN-LAST:event_scrollWindowCheckBoxActionPerformed

    private void commandTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_commandTextFieldActionPerformed
        String str = this.commandTextField.getText().replaceAll("(\\r\\n|\\n\\r|\\r|\\n)", "");
        this.sendCommand(str);
        //this.commPort.sendStringToComm(str + "\n");
        this.commandTextField.setText("");
        this.commandList.add(str);
        this.commandNum = -1;
    }//GEN-LAST:event_commandTextFieldActionPerformed

    // TODO: Find out how to make these key* functions actions like the above.
    @Override
    public void keyPressed(KeyEvent ke) {
        boolean pressed = false;
        
        if (ke.getKeyCode() == KeyEvent.VK_UP) {
            pressed = true;
            if (this.commandNum == 0 || this.commandList.isEmpty()) {
                java.awt.Toolkit.getDefaultToolkit().beep();
            } else if (this.commandNum == -1) {
                this.commandNum = this.commandList.size() -1;
            } else {
                this.commandNum--;
            }
        }
        else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
            pressed = true;
            if ((this.commandNum == -1) || this.commandNum == (this.commandList.size() -1)) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                return;
            } else {
                this.commandNum++;
            }
        }
        
        if (pressed && this.commandNum != -1) {
            String text = this.commandList.get(this.commandNum);
            this.commandTextField.setText(text);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
        // Don't care about this one...
    }
    
    @Override
    public void keyReleased(KeyEvent ke) {
        // Or this one...
    }
    
    private void openButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        try {
            boolean ret = commPort.openCommPort(commPortComboBox.getSelectedItem().toString(), 9600);
            this.updateControlsForComm(ret);
        } catch (Exception e) {
            this.displayErrorDialog("Error opening connection: "+e.getMessage());
        }
        
        // Let the command field grab focus.
        commandTextField.grabFocus();
    }//GEN-LAST:event_openButtonActionPerformed

    private void refreshButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadPortSelector();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void browseButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
            processFile(fileChooser.getSelectedFile());
            
            // Reset labels
            this.durationValueLabel.setText("00:00:00");
            this.sentRowsValueLabel.setText("0");
            this.sentRows = 0;
        } else {
            // Canceled file open.
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void closeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeCommConnection();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void lineBreakNActionPerformed(ActionEvent evt) {//GEN-FIRST:event_lineBreakNActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakNActionPerformed

    private void sendButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                    durationValueLabel.setText(timePassed());
                }});
                
            }
        };
        
        startTime = System.currentTimeMillis();
        if (timer != null) {
            timer.stop();
        }
        timer = new Timer(1000, actionListener);
        timer.start();
        
        try {
            this.clearTable();
            this.sentRowsValueLabel.setText("0");
            this.sentRows = 0;
            this.updateControlsForSend(true);
            this.commPort.streamFileToComm(this.gcodeFile);
        } catch (Exception e) {
            timer.stop();
            e.printStackTrace();
            this.displayErrorDialog("Error while starting file stream: "+e.getMessage());
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void pauseButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        try {
            if (this.pauseButton.getText().equalsIgnoreCase("pause")) {
                this.commPort.pauseSend();
                this.pauseButton.setText("Resume");
            }
            else if (this.pauseButton.getText().equalsIgnoreCase("resume")) {
                this.commPort.resumeSend();
                this.pauseButton.setText("Pause");
            }
        } catch (Exception e) {
            e.printStackTrace();
            this.displayErrorDialog("Error while trying to pause/resume");
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.commPort.cancelSend();
                
        this.updateControlsForSend(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void lineBreakNRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_lineBreakNRActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakNRActionPerformed

    private void lineBreakRNActionPerformed(ActionEvent evt) {//GEN-FIRST:event_lineBreakRNActionPerformed
        this.commPort.setLineTerminator(this.getNewline());
    }//GEN-LAST:event_lineBreakRNActionPerformed

    private void btnXR1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXR1ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 X1");
    }//GEN-LAST:event_btnXR1ActionPerformed

    private void btnXR5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXR5ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 X5");
    }//GEN-LAST:event_btnXR5ActionPerformed

    private void btnXR10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXR10ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 X10");
    }//GEN-LAST:event_btnXR10ActionPerformed

    private void btnXL1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXL1ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 X-1");
    }//GEN-LAST:event_btnXL1ActionPerformed

    private void btnXL5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXL5ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G0 X-5");
    }//GEN-LAST:event_btnXL5ActionPerformed

    private void btnXL10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXL10ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 X-10");
    }//GEN-LAST:event_btnXL10ActionPerformed

    private void btnXT1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXT1ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 Y1");
    }//GEN-LAST:event_btnXT1ActionPerformed

    private void btnXT5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXT5ActionPerformed
        this.sendCommand("G01 Y5");
    }//GEN-LAST:event_btnXT5ActionPerformed

    private void btnXT10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXT10ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 Y+10");
    }//GEN-LAST:event_btnXT10ActionPerformed

    private void btnXB1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXB1ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 Y-1");
    }//GEN-LAST:event_btnXB1ActionPerformed

    private void btnXB5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXB5ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 Y-5");
    }//GEN-LAST:event_btnXB5ActionPerformed

    private void btnXB10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXB10ActionPerformed
        this.sendCommand("G91");
        this.sendCommand("G01 Y-10");
    }//GEN-LAST:event_btnXB10ActionPerformed

    private void btnSpindleOnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSpindleOnActionPerformed
        this.sendCommand("M03");
    }//GEN-LAST:event_btnSpindleOnActionPerformed

    private void btnSpindleOffActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSpindleOffActionPerformed
        this.sendCommand("M05");
    }//GEN-LAST:event_btnSpindleOffActionPerformed

    private void overrideSpeedCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_overrideSpeedCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_overrideSpeedCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        * /
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
        
    private void initProgram() {
        this.loadPortSelector();
        this.checkScrollWindow();
        this.setTitle("Universal GcodeSender (Version 1.0.2)");
        
        // Hook the view up to the model
        this.commandList = new ArrayList<String>();
        this.commPort = new SerialCommunicator();
        
        // Setup file browser.
        this.fileChooser = new JFileChooser();
        this.fileChooser.setFileFilter(new GcodeFileTypeFilter());

        // Register listeners
        this.commPort.setFileStreamCompleteListener(this);
        this.commPort.setCommandQueuedListener(this);
        this.commPort.setCommandSentListener(this);
        this.commPort.setCommandCompleteListener(this);
        this.commPort.setCommandPreprocessorListener(this);
        this.commPort.setCommConsoleListener(this);
  
        
        // Command History
        this.commandTextField.addKeyListener(this);
        
        this.tableModel = (DefaultTableModel) this.commandTable.getModel();
        
        updateControlsForComm(false);
    }

    private void updateControlsForComm(boolean isOpen) {
        this.btnXB1.setEnabled(isOpen);
        this.btnXT1.setEnabled(isOpen);
        this.btnXL1.setEnabled(isOpen);
        this.btnXR1.setEnabled(isOpen);
        this.btnXB5.setEnabled(isOpen);
        this.btnXT5.setEnabled(isOpen);
        this.btnXL5.setEnabled(isOpen);
        this.btnXR5.setEnabled(isOpen);
        this.btnXB10.setEnabled(isOpen);
        this.btnXT10.setEnabled(isOpen);
        this.btnXL10.setEnabled(isOpen);
        this.btnXR10.setEnabled(isOpen);
        this.btnSpindleOff.setEnabled(isOpen);
        this.btnSpindleOn.setEnabled(isOpen);
        
        if (isOpen) {
            this.commPortComboBox.setEnabled(false);
            this.refreshButton.setEnabled(false);
            this.openButton.setEnabled(false);
            this.closeButton.setEnabled(true);
            this.commandTextField.setEnabled(true);
        } else {
            this.commPortComboBox.setEnabled(true);
            this.refreshButton.setEnabled(true);
            this.openButton.setEnabled(true);
            this.closeButton.setEnabled(false);
            this.commandTextField.setEnabled(false);
        }
        
        this.updateFileControlsForComm(isOpen);
    }
    
    private void updateFileControlsForComm(boolean isOpen) {
        if (isOpen) {
            this.sendButton.setEnabled(true);
            this.browseButton.setEnabled(true);
            this.overrideSpeedCheckBox.setEnabled(true);
            this.overrideSpeedValueSpinner.setEnabled(true);
            this.fileTextField.setEnabled(true);
        } else {
            this.sendButton.setEnabled(false);
            this.browseButton.setEnabled(false);
            this.overrideSpeedCheckBox.setEnabled(false);
            this.overrideSpeedValueSpinner.setEnabled(false);
            this.fileTextField.setEnabled(false);
            
            // These might be on... turn it off.
            this.pauseButton.setEnabled(false);
            this.cancelButton.setEnabled(false);
        }
    }
    
    private void updateControlsForSend(boolean isSending) {
        this.btnXB1.setEnabled(!isSending);
        this.btnXT1.setEnabled(!isSending);
        this.btnXL1.setEnabled(!isSending);
        this.btnXR1.setEnabled(!isSending);
        this.btnXB5.setEnabled(!isSending);
        this.btnXT5.setEnabled(!isSending);
        this.btnXL5.setEnabled(!isSending);
        this.btnXR5.setEnabled(!isSending);
        this.btnXB10.setEnabled(!isSending);
        this.btnXT10.setEnabled(!isSending);
        this.btnXL10.setEnabled(!isSending);
        this.btnXR10.setEnabled(!isSending);
        this.btnSpindleOff.setEnabled(!isSending);
        this.btnSpindleOn.setEnabled(!isSending);
        
        if (isSending) {
            this.sendButton.setEnabled(false);
            this.pauseButton.setEnabled(true);
            this.commandTextField.setEnabled(false);
            this.overrideSpeedCheckBox.setEnabled(false);
            this.overrideSpeedValueSpinner.setEnabled(false);
            this.cancelButton.setEnabled(true);  
        } else {
            this.sendButton.setEnabled(true);
            this.pauseButton.setEnabled(false);
            this.commandTextField.setEnabled(true);
            this.overrideSpeedCheckBox.setEnabled(true);
            this.overrideSpeedValueSpinner.setEnabled(true);
            this.cancelButton.setEnabled(false);
        }
    }
    
    // Scans for comm ports and puts them in the comm port combo box.
    private void loadPortSelector() {
        commPortComboBox.removeAllItems();
        
        List<CommPortIdentifier> portList = CommUtils.getSerialPortList();
        
        if (portList.size() < 1) {
            this.displayErrorDialog("No serial ports found.");
        } else {
            // Sort?
            //java.util.Collections.sort(portList);

            java.util.Iterator<CommPortIdentifier> portIter = portList.iterator();

            while ( portIter.hasNext() ) 
            {
                CommPortIdentifier portIdentifier = portIter.next();
                commPortComboBox.addItem(portIdentifier.getName());
            }
            
            commPortComboBox.setSelectedIndex(0);
        }
    }
    
    private void checkScrollWindow() {
        DefaultCaret caret = (DefaultCaret)consoleTextArea.getCaret();
        if (scrollWindowCheckBox.isSelected()) {
          caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
          consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
        } else {
            caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        }
    }
    
    // Processes input file.
    // This could theoretically scan it for errors, but GcodeSender just counts
    // how many lines are in it.
    private void processFile(File file) {
        gcodeFile = file;
        Integer numRows = 0;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(file));

            byte[] c = new byte[1024];

            int readChars;
            while ((readChars = is.read(c)) != -1) {
                for (int i = 0; i < readChars; ++i) {
                    if (c[i] == '\n'){
                        ++numRows;
                    }
                }
            }
            
            is.close();
        } catch (FileNotFoundException ex) {
            this.displayErrorDialog("Problem opening file: " + ex.getMessage());
        } catch (IOException e) {
            this.displayErrorDialog("Unknown IOException while processing file: "+e.getMessage());
        }

        rowsValueLabel.setText(numRows.toString());
    }
    
    private int getSpeedOverrideValue() {
        int ret = -1;
        if (this.overrideSpeedCheckBox.isSelected()) {
            ret = Integer.parseInt( this.overrideSpeedValueSpinner.getValue().toString() );
        }
        return ret;
    }
    
    private String getNewline() {
        if (lineBreakNR.isSelected()){
            return "\n\r";
        }else if (lineBreakRN.isSelected()){
            return "\r\n";
        }else if (lineBreakN.isSelected()){
            return "\n";
        }else{
            return "wtfbbq";
        }
    }

    private void closeCommConnection() {
        this.commPort.closeCommPort();
        
        this.updateControlsForComm(false);
        this.consoleTextArea.append("\n**** Connection closed ****");

    }
    
    private void sendCommand(String command){
        this.commPort.sendStringToComm(command + "\n");
    }
    
    // TODO: put this in a util class
    private String timePassed(){
        long now = System.currentTimeMillis();
        long elapsedTime = now - startTime;
        String format = String.format("%%0%dd", 2);  
        elapsedTime = elapsedTime / 1000;  
        String seconds = String.format(format, elapsedTime % 60);  
        String minutes = String.format(format, (elapsedTime % 3600) / 60);  
        String hours = String.format(format, elapsedTime / 3600);  
        String time =  hours + ":" + minutes + ":" + seconds;  
        return time;  
    }
    
    void clearTable() {
        while (this.tableModel.getRowCount()>0){
            this.tableModel.removeRow(0);
        }
    }
        
    private void displayErrorDialog(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /** SerialCommunicatorListener implementation.
     */
    
    @Override
    public void fileStreamComplete(String filename, boolean success) {
        // Stop the timer
        this.timer.stop();
        this.endTime = System.currentTimeMillis();
        
        this.updateControlsForSend(false);
        if (success) {
            JOptionPane.showMessageDialog(new JFrame(), "Job complete after "+this.durationValueLabel.getText(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            displayErrorDialog("Job completed with error.");
        }
    }
    
    private void scrollTable(int toRow) {
        // Scroll if selected.
        if (this.scrollWindowCheckBox.isSelected()) {
            if (this.commandTable.isVisible()) {
                this.commandTable.getSelectionModel().setSelectionInterval(toRow, toRow);
                this.commandTable.scrollRectToVisible(new Rectangle(this.commandTable.getCellRect(toRow, 0, true)));
            }
        }
        
    }
    
    @Override
    public void commandQueued(GcodeCommand command) {
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;

        this.tableModel.addRow(new Object[]{command.getCommandString(), command.isSent(), command.isDone(), command.getResponse()});
    }
     
    @Override
    public void commandSent(GcodeCommand command) {
        // Update # rows sent label
        this.sentRows++;
        
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;
        // TODO: If Preprocessor changes the command mark the cell somehow
        // command (in case of preprocessor change)
        //tableModel.setValueAt(command.getCommandString(), command.getCommandNumber(), 0);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                sentRowsValueLabel.setText(""+sentRows);
                        
                // sent
                tableModel.setValueAt(sentCommand.isSent(), row, 1);
                scrollTable(row);
            }});
    }
    
    @Override
    public void commandComplete(GcodeCommand command) {
        final int row = command.getCommandNumber();
        final GcodeCommand sentCommand = command;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // done
                tableModel.setValueAt(sentCommand.isDone(), row, 2);

                // response
                tableModel.setValueAt(sentCommand.getResponse(), row, 3);

                scrollTable(row);
            }});
    }
    
    @Override
    public String preprocessCommand(String command) {
        Integer overrideSpeed = this.getSpeedOverrideValue();
        String newCommand = command;

        // Remove comments from command.
        newCommand = CommUtils.removeComments(newCommand);

        // Override feed speed
        if (overrideSpeed > 0) {
            newCommand = CommUtils.overrideSpeed(command, this.getSpeedOverrideValue());
        }
        
        // Return the post processed command.
        return newCommand;
    }

    @Override
    public void messageForConsole(String msg) {
        this.consoleTextArea.append(msg);
        
        if (this.consoleTextArea.isVisible() &&
                this.scrollWindowCheckBox.isEnabled()) {
            this.consoleTextArea.setCaretPosition(this.consoleTextArea.getDocument().getLength());
        }
    }
    
    // My Variables
    private javax.swing.JFileChooser fileChooser;
    private java.io.File gcodeFile;
    private SerialCommunicator commPort;
    private int commandNum = -1;
    private List<String> commandList;
    private DefaultTableModel tableModel;
    private int sentRows = 0;
    
    // Duration timer
    private Timer timer;
    private long startTime;
    private long endTime;
    
    // Generated variables.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton browseButton;
    private JButton btnSpindleOff;
    private JButton btnSpindleOn;
    private JButton btnXB1;
    private JButton btnXB10;
    private JButton btnXB5;
    private JButton btnXL1;
    private JButton btnXL10;
    private JButton btnXL5;
    private JButton btnXR1;
    private JButton btnXR10;
    private JButton btnXR5;
    private JButton btnXT1;
    private JButton btnXT10;
    private JButton btnXT5;
    private JButton cancelButton;
    private JButton closeButton;
    private JComboBox commPortComboBox;
    private JLabel commandLabel;
    private JTable commandTable;
    private JTextField commandTextField;
    private JTextArea consoleTextArea;
    private JLabel durationLabel;
    private JLabel durationValueLabel;
    private JLabel fileLabel;
    private JTextField fileTextField;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTabbedPane jTabbedPane1;
    private JTabbedPane jTabbedPane2;
    private ButtonGroup lineBreakGroup;
    private JRadioButton lineBreakN;
    private JRadioButton lineBreakNR;
    private JRadioButton lineBreakRN;
    private JButton openButton;
    private JCheckBox overrideSpeedCheckBox;
    private JSpinner overrideSpeedValueSpinner;
    private JButton pauseButton;
    private JButton refreshButton;
    private JLabel rowsLabel;
    private JLabel rowsValueLabel;
    private JCheckBox scrollWindowCheckBox;
    private JButton sendButton;
    private JLabel sentRowsLabel;
    private JLabel sentRowsValueLabel;
    // End of variables declaration//GEN-END:variables
}
