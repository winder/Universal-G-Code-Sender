<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.willwinder</groupId>
        <artifactId>ugs-platform-parent</artifactId>
        <version>2.0-SNAPSHOT</version>
    </parent>

    <artifactId>ugs-platform-app</artifactId>
    <version>2.0-SNAPSHOT</version>
    <packaging>nbm-application</packaging>

    <name>ugs-platform-app</name>

    <dependencies>
        <dependency>
            <groupId>org.netbeans.cluster</groupId>
            <artifactId>platform</artifactId>
            <version>${netbeans.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-branding</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!-- NbModuleSuite functional in RELEASE70 or later: -->
        <dependency>
            <groupId>org.netbeans.api</groupId>
            <artifactId>org-netbeans-modules-nbjunit</artifactId>
            <version>${netbeans.version}</version>
            <scope>test</scope> <!-- beyond platform cluster, this often needs to be dropped down to compile/runtime, some other modules in IDE clusters depend on it -->
        </dependency>
        <!-- To use Jelly Tools in your functional tests, add or replace with:
        <dependency>
            <groupId>org.netbeans.api</groupId>
            <artifactId>org-netbeans-modules-jellytools-platform</artifactId>
            <version>${netbeans.version}</version>
            <scope>test</scope>
        </dependency>
        -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-visualizer</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-ugscore</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-ugslib</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-plugin-workflow</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-gcode-editor</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-surfacescanner</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ProbeModule</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>DowelModule</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>GcodeTools</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-plugin-jog</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-plugin-setup-wizard</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-welcome-page</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-plugin-joystick</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ugs-platform-plugin-cloud-storage</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.netbeans.utilities</groupId>
                <artifactId>nbm-maven-plugin</artifactId>
                <configuration>
                    <!-- Set up the gephi.conf for the final artifact -->
                    <etcConfFile>${basedir}/target/${brandingToken}.conf</etcConfFile>

                    <!-- Eventually enable some of these. -->
                    <installerOsMacosx>false</installerOsMacosx>
                    <installerOsSolaris>false</installerOsSolaris>
                    <!--
                    <installerOsLinux>false</installerOsLinux>
                    <installerOsWindows>false</installerOsWindows>
                    -->

                    <!-- Inject customized NB Platform harness via template.xml -->
                    <templateFile>${basedir}/installer/template.xml</templateFile>
                    <installerPack200Enable>false</installerPack200Enable>

                    <!-- Properties to pass into the ant build harness. -->
                    <userSettings>
                        <!-- Tell custom template.xml where these files are. -->
                        <configuration.logic.file>${basedir}/installer/ConfigurationLogic.java</configuration.logic.file>
                        <nbi.stub.buildfile>${basedir}/installer/build.xml</nbi.stub.buildfile>
                    </userSettings>
                </configuration>
            </plugin>
            <!-- Permits NbModuleSuite to be run in integration-test phase: -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${ugs.surefire.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <all.clusters>${all.clusters}</all.clusters>
                        <branding.token>${brandingToken}</branding.token>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- Copy ressources gephi.conf and Info.plist with filtering (replacing 'project.version' by the actual version -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-app-conf-file</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        <include>${brandingToken}.conf</include>
                                        <include>Info.plist</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <escapeString>\</escapeString>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
          <id>deployment</id>
          <build>
            <plugins>
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <dependencies>
                  <dependency>
                    <groupId>ant-contrib</groupId>
                    <artifactId>ant-contrib</artifactId>
                    <version>20020829</version>
                  </dependency>
                </dependencies>
                <executions>
                  <execution>
                    <id>build-jre-bundles</id>
                    <phase>package</phase>
                    <goals>
                      <goal>run</goal>
                    </goals>
                    <configuration>
                      <target>
                        <!-- add the ant tasks from ant-contrib -->
                        <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                        <!-- antfile uses a bunch of properties:

                             ugs.bundle.java.url - java url prefix
                             ugs.mac.bundle.jvm.version - mac version postfix (minus .tar.gz)
                             ugs.windows.bundle.jvm.version - windows version postfix (minus .tar.gz)
                             ugs.linux.bundle.jvm.version - linux version postfix (minus .tar.gz)
                             ugs.linux.bundle.jvm.version - raspberrypi version postfix (minus .tar.gz)
                             ugs.rpi.bundle.javafx.url - raspberrypi javafx libraries

                             project.build.directory - project build dir, inherited from POM


                             -->
                        <ant antfile="${basedir}/build-jre-bundles.xml"/>
                      </target>
                    </configuration>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
        </profile>

        <profile>
            <id>create-win-package</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- Create the Windows application bundle -->
                            <execution>
                                <id>create-win-app-bundle</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Clean -->
                                        <delete includeEmptyDirs="true" failonerror="false" removeNotFollowedSymlinks="true">
                                            <fileset dir="${project.build.directory}/${brandingToken}-win" followsymlinks="false"/>
                                            <fileset dir="${project.build.directory}/${ugs.app.title}" followsymlinks="false"/>
                                            <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}.zip" followsymlinks="false"/>
                                        </delete>

                                        <!-- Create folders -->
                                        <mkdir dir="${project.build.directory}/${brandingToken}-win"/>

                                        <!-- Copy application -->
                                        <copy todir="${project.build.directory}/${brandingToken}-win">
                                            <fileset dir="${project.build.directory}/${brandingToken}"/>
                                        </copy>

                                        <!-- Download and unzip JRE -->
                                        <exec dir="${project.build.directory}" executable="curl" failonerror="true">
                                            <arg line="-L"/>
                                            <arg line="${ugs.bundle.java.win.url}"/>
                                            <arg line="-o"/>
                                            <arg line="jre-win.zip"/>
                                        </exec>

                                        <!-- Unzip archive -->
                                        <mkdir dir="${project.build.directory}/${brandingToken}-win/jdk"/>
                                        <exec dir="${project.build.directory}" executable="unzip" failonerror="true">
                                            <arg line="-e"/>
                                            <arg line="jre-win.zip"/>
                                            <arg line="-d &quot;${brandingToken}-win/jdk&quot;"/>
                                        </exec>

                                        <!-- Get the JRE folder name -->
                                        <path id="jre_name">
                                            <dirset dir="${project.build.directory}/${brandingToken}-win/jdk" includes="jdk*" />
                                        </path>
                                        <property name="bundle.jvm.path" refid="jre_name" />
                                        <basename property="bundle.jvm.name" file="${bundle.jvm.path}"/>

                                        <!-- Configure relative JRE path into ugsplatform.conf -->
                                        <replace file="${project.build.directory}/${brandingToken}-win/etc/${brandingToken}.conf" token="#jdkhome=&quot;/path/to/jdk&quot;" value="jdkhome=&quot;jdk/${bundle.jvm.name}&quot;"/>

                                        <!-- Create Archive -->
                                        <exec dir="${project.build.directory}" executable="zip" failonerror="true">
                                            <arg value="-r"/>
                                            <arg value="${project.artifactId}-${project.version}-win.zip"/>
                                            <arg value="${brandingToken}-win"/>
                                        </exec>

                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
          <id>create-macosx-package</id>
          <build>
            <plugins>
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                  <!-- Create the Mac OS X application bundle and dmg file -->
                  <execution>
                      <id>create-mac-app-bundle</id>
                      <phase>package</phase>
                      <goals>
                          <goal>run</goal>
                      </goals>
                      <configuration>
                          <target>
                              <!-- Clean -->
                              <delete includeEmptyDirs="true" failonerror="false" removeNotFollowedSymlinks="true">
                                  <fileset dir="${project.build.directory}/${ugs.appbundle.name}.app" followsymlinks="false"/>
                                  <fileset dir="${project.build.directory}/${ugs.app.title}" followsymlinks="false"/>
                                  <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}.dmg" followsymlinks="false"/>
                              </delete>
                              <delete file="${project.build.directory}/${project.artifactId}-${project.version}.dmg" failonerror="false"/>

                              <!-- Create folders -->
                              <mkdir dir="${project.build.directory}/${ugs.appbundle.name}.app"/>
                              <mkdir dir="${project.build.directory}/${ugs.appbundle.name}.app/Contents/MacOS"/>

                              <!-- Copy application -->
                              <copy todir="${project.build.directory}/${ugs.appbundle.name}.app/Contents/Resources/${brandingToken}">
                                  <fileset dir="${project.build.directory}/${brandingToken}"/>
                              </copy>

                              <!-- Copy logo and configuration files -->
                              <copy tofile="${project.build.directory}/${ugs.appbundle.name}.app/Contents/Resources/${brandingToken}.icns" file="src/main/app-resources/${brandingToken}.icns" />
                              <copy tofile="${project.build.directory}/${ugs.appbundle.name}.app/Contents/Info.plist" file="${project.build.directory}/Info.plist"/>

                              <!-- Move bin/ugsplatform script into MacOS/ugsplatform and modify the script so it founds its resources -->
                              <move file="${project.build.directory}/${ugs.appbundle.name}.app/Contents/Resources/${brandingToken}/bin/${brandingToken}" todir="${project.build.directory}/${ugs.appbundle.name}.app/Contents/MacOS"/>
                              <replace file="${project.build.directory}/${ugs.appbundle.name}.app/Contents/MacOS/${brandingToken}" token="`dirname &quot;$PRG&quot;`" value="`dirname &quot;$PRG&quot;`&quot;/../Resources/${brandingToken}/bin&quot;"/>
                              <chmod file="${project.build.directory}/${ugs.appbundle.name}.app/Contents/MacOS/${brandingToken}" perm="ugo+rx"/>

                              <!-- Download and untar JRE -->
                              <exec dir="${project.build.directory}" executable="curl" failonerror="true">
                                  <arg line="-L"/>
                                  <arg line="${ugs.bundle.java.mac.url}"/>
                                  <arg line="-o"/>
                                  <arg line="jre-mac.tar.gz"/>
                              </exec>

                              <!-- Unzip archive -->
                              <mkdir dir="${project.build.directory}/${ugs.appbundle.name}.app/Contents/PlugIns"/>
                              <exec dir="${project.build.directory}" executable="tar" failonerror="true">
                                  <arg line="-zxf"/>
                                  <arg line="jre-mac.tar.gz"/>
                                  <arg line="-C &quot;${ugs.appbundle.name}.app/Contents/PlugIns&quot;"/>
                              </exec>

                              <!-- Remove quarantine bit set recursively on JRE -->
                              <!--
                              <exec dir="${project.build.directory}" os="Mac OS X" executable="xattr" failonerror="true">
                                  <arg line="-rd"/>
                                  <arg line="com.apple.quarantine"/>
                                  <arg line="&quot;${ugs.appbundle.name}.app/Contents/PlugIns&quot;"/>
                              </exec>
                              -->

                              <!-- Get the JRE folder name -->
                              <path id="jre_name_osx">
                                  <dirset dir="${project.build.directory}/${ugs.appbundle.name}.app/Contents/PlugIns" includes="jdk*" />
                              </path>
                              <property name="bundle.mac.jvm.path" refid="jre_name_osx" />
                              <basename property="bundle.mac.jvm.name" file="${bundle.mac.jvm.path}"/>

                              <!-- Configure relative JRE path into ugsplatform.conf -->
                              <replace file="${project.build.directory}/${ugs.appbundle.name}.app/Contents/Resources/${brandingToken}/etc/${brandingToken}.conf" token="#jdkhome=&quot;/path/to/jdk&quot;" value="jdkhome=&quot;../../PlugIns/${bundle.mac.jvm.name}/Contents/Home&quot;"/>
                              <chmod file="${project.build.directory}/${ugs.appbundle.name}.app/Contents/PlugIns/**" perm="+x" type="both"/>

                              <!-- Codesign JRE -->
                              <!--
                              <exec dir="${project.build.directory}" os="Mac OS X" executable="codesign" failonerror="true">
                                  <arg value="-fs"/>
                                  <arg value="${ugs.codesign.identity}"/>
                                  <arg value="-v"/>
                                  <arg value="${ugs.appbundle.name}.app/Contents/PlugIns/${bundle.mac.jvm.name}/"/>
                              </exec>
                              -->

                              <!-- Codesign app -->
                              <!--
                              <exec dir="${project.build.directory}" os="Mac OS X" executable="codesign" failonerror="true">
                                  <arg value="-fs"/>
                                  <arg value="${ugs.codesign.identity}"/>
                                  <arg value="-v"/>
                                  <arg value="${ugs.appbundle.name}.app"/>
                              </exec>
                              -->

                              <!-- Create application folder and add Applications dynamic link -->
                              <mkdir dir="${project.build.directory}/${ugs.app.title}"/>
                              <move file="${project.build.directory}/${ugs.appbundle.name}.app" todir="${project.build.directory}/${ugs.app.title}/" />
                              <symlink link="${project.build.directory}/${ugs.app.title}/Applications" resource="/Applications" failonerror="false" />

                              <!-- Create DMG -->
                              <!-- For this to work on MacOSX you need to install cdrtools: 'brew install cdrtools' -->
                              <exec dir="${project.build.directory}" executable="mkisofs" failonerror="true">
                                  <arg value="-V"/>
                                  <arg value="${ugs.appbundle.name}"/>
                                  <arg value="-r"/>
                                  <arg value="-o"/>
                                  <arg value="${project.artifactId}-${project.version}.dmg"/>
                                  <arg value="${project.build.directory}/${ugs.app.title}"/>
                              </exec>
                          </target>
                      </configuration>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
        </profile>

     <!-- Create the RaspberryPi application bundle -->
     <profile>
       <id>create-pi-package</id>
       <build>
         <plugins>
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-antrun-plugin</artifactId>
             <executions>
               <execution>
                 <id>create-rpi-bundle</id>
                 <phase>package</phase>
                 <goals>
                     <goal>run</goal>
                 </goals>
                 <configuration>
                   <target>
                     <!-- Clean -->
                     <delete includeEmptyDirs="true" failonerror="false" removeNotFollowedSymlinks="true">
                       <fileset dir="${project.build.directory}/${brandingToken}-pi" followsymlinks="false"/>
                     </delete>
                     <delete file="${project.build.directory}/${project.artifactId}-${project.version}-pi.tar.gz" failonerror="false"/>

                     <!-- Create folders -->
                     <mkdir dir="${project.build.directory}/${brandingToken}-pi"/>

                     <!-- Copy application -->
                     <copy todir="${project.build.directory}/${brandingToken}-pi">
                       <fileset dir="${project.build.directory}/${brandingToken}"/>
                     </copy>

                     <!-- Download and untar JRE -->
                     <exec dir="${project.build.directory}" executable="curl" failonerror="true">
                       <arg line="-L"/>
                       <arg line="${ugs.bundle.java.rpi.url}"/>
                       <arg line="-o"/>
                       <arg line="jre-rpi.tar.gz"/>
                     </exec>

                     <!-- Unzip archive -->
                       <mkdir dir="${project.build.directory}/${brandingToken}-pi/jdk"/>
                       <exec dir="${project.build.directory}" executable="tar" failonerror="true">
                       <arg line="-zxf"/>
                       <arg line="jre-rpi.tar.gz"/>
                       <arg line="-C &quot;${brandingToken}-pi/jdk&quot;"/>
                     </exec>

                     <!-- Get the JRE folder name -->
                     <path id="jre_name">
                       <dirset dir="${project.build.directory}/${brandingToken}-pi/jdk" includes="jdk*" />
                     </path>
                     <property name="bundle.jvm.path" refid="jre_name" />
                     <basename property="bundle.jvm.name" file="${bundle.jvm.path}"/>

                     <!-- Configure relative JRE path into ugsplatform.conf -->
                     <replace file="${project.build.directory}/${brandingToken}-pi/etc/${brandingToken}.conf" token="#jdkhome=&quot;/path/to/jdk&quot;" value="jdkhome=&quot;jdk/${bundle.jvm.name}&quot;"/>
                     <chmod file="${project.build.directory}/${brandingToken}-pi/bin/**" perm="+x" type="both"/>

                     <!-- Create Archive -->
                     <exec dir="${project.build.directory}" executable="tar" failonerror="true">
                       <env key="GZIP" value="-9"/>
                       <arg value="-czvf"/>
                       <arg value="${project.artifactId}-${project.version}-pi.tar.gz"/>
                       <arg value="-C"/>
                       <arg value="${project.build.directory}"/>
                       <arg value="${brandingToken}-pi"/>
                     </exec>
                   </target>
                 </configuration>
               </execution>
             </executions>
           </plugin>
         </plugins>
       </build>
     </profile>

        <!-- Create the Linux application bundle -->
        <profile>
            <id>create-linux-package</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-rpi-bundle</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Clean -->
                                        <delete includeEmptyDirs="true" failonerror="false" removeNotFollowedSymlinks="true">
                                            <fileset dir="${project.build.directory}/${brandingToken}-linux" followsymlinks="false"/>
                                        </delete>
                                        <delete file="${project.build.directory}/${project.artifactId}-${project.version}-linux.tar.gz" failonerror="false"/>

                                        <!-- Create folders -->
                                        <mkdir dir="${project.build.directory}/${brandingToken}-linux"/>

                                        <!-- Copy application -->
                                        <copy todir="${project.build.directory}/${brandingToken}-linux">
                                            <fileset dir="${project.build.directory}/${brandingToken}"/>
                                        </copy>

                                        <!-- Download and untar JRE -->
                                        <exec dir="${project.build.directory}" executable="curl" failonerror="true">
                                          <arg line="-L"/>
                                          <arg line="${ugs.bundle.java.linux.url}"/>
                                          <arg line="-o"/>
                                          <arg line="jre-linux.tar.gz"/>
                                        </exec>

                                        <!-- Unzip archive -->
                                        <mkdir dir="${project.build.directory}/${brandingToken}-linux/jdk"/>
                                        <exec dir="${project.build.directory}" executable="tar" failonerror="true">
                                            <arg line="-zxf"/>
                                            <arg line="jre-linux.tar.gz"/>
                                            <arg line="-C &quot;${brandingToken}-linux/jdk&quot;"/>
                                        </exec>

                                        <!-- Get the JRE folder name -->
                                        <path id="jre_name">
                                            <dirset dir="${project.build.directory}/${brandingToken}-linux/jdk" includes="jdk*" />
                                        </path>
                                        <property name="bundle.jvm.path" refid="jre_name" />
                                        <basename property="bundle.jvm.name" file="${bundle.jvm.path}"/>

                                        <!-- Configure relative JRE path into ugsplatform.conf -->
                                        <replace file="${project.build.directory}/${brandingToken}-linux/etc/${brandingToken}.conf" token="#jdkhome=&quot;/path/to/jdk&quot;" value="jdkhome=&quot;jdk/${bundle.jvm.name}&quot;"/>
                                        <chmod file="${project.build.directory}/${brandingToken}-linux/bin/**" perm="+x" type="both"/>

                                        <!-- Create Archive -->
                                        <exec dir="${project.build.directory}" executable="tar" failonerror="true">
                                            <env key="GZIP" value="-9"/>
                                            <arg value="-czvf"/>
                                            <arg value="${project.artifactId}-${project.version}-linux.tar.gz"/>
                                            <arg value="-C"/>
                                            <arg value="${project.build.directory}"/>
                                            <arg value="${brandingToken}-linux"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
        <id>create-autoupdate</id>
        <build>
          <plugins>
            <!-- NBM Plugin settings. Enable the autoupdate generation -->
            <plugin>
              <groupId>org.apache.netbeans.utilities</groupId>
              <artifactId>nbm-maven-plugin</artifactId>
              <executions>
                <execution>
                  <id>autoupdate</id>
                  <goals>
                    <goal>autoupdate</goal>
                  </goals>
                  <configuration>
                    <outputDirectory>${project.build.directory}/site</outputDirectory>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </build>
      </profile>

      <!-- Profile that pushes autoupdate files to sourceforge -->
      <profile>
        <id>push-autoupdate-sf</id>
        <properties>
          <sourceforge.path>/home/frs/project/u/ug/ugs-update-center/</sourceforge.path>
        </properties>
        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <execution>
                  <id>copy-to-sourceforge</id>
                  <phase>install</phase>
                  <goals>
                    <goal>run</goal>
                  </goals>
                  <configuration>
                    <target>

                      <!-- remove extra files -->
                      <delete dir="${project.build.directory}/site/${project.version}/" failonerror="false"/>
                      <copy todir="${project.build.directory}/site/${project.version}">
                        <fileset dir="${project.build.directory}/site/netbeans_site/" includes="**"/>
                      </copy>

                      <!-- copy autoupdate files to sourceforge -->
                      <scp todir="${sourceforge.login}:${sourceforge.password}@frs.sourceforge.net:${sourceforge.path}" sftp="true" trust="true">
                        <fileset dir="${project.build.directory}/site/">
                          <include name="**/${project.version}/"/>
                        </fileset>
                      </scp>
                    </target>
                  </configuration>
                </execution>
              </executions>
                <dependencies>
                  <!-- scp dependencies -->
                  <dependency>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant-jsch</artifactId>
                    <version>1.10.1</version>
                  </dependency>
                  <dependency>
                    <groupId>com.jcraft</groupId>
                    <artifactId>jsch</artifactId>
                    <version>0.1.54</version>
                  </dependency>
                  <!-- ftp dependencies -->
                  <dependency>
                    <groupId>commons-net</groupId>
                    <artifactId>commons-net</artifactId>
                    <version>1.4.1</version>
                  </dependency>
                  <dependency>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant-commons-net</artifactId>
                    <version>1.8.1</version>
                  </dependency>
                </dependencies>
            </plugin>
          </plugins>
        </build>
      </profile>

      <!-- Profile that pushes the /site folder to GitHub's gh-pages -->
      <!--
         Usage:
            mvn install -P create-autoupdate,push-autoupdate

         Configuration:
            The site-maven-plugin uses the <scm> settings from a parent POM.
            
            settings.xml entry for github credentials

            <server>
              <id>github</id>
              <username>username</username>
              <password>password</password>
            </server>

         Note: This is slow. After a 'mvn clean' this command took 6:20 min.
      -->
      <profile>
        <id>push-autoupdate-gh</id>
        <properties>
          <github.global.server>github</github.global.server>
        </properties>
        <build>
          <plugins>
            <!-- Copy parent's site into target/site -->
            <!--
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <execution>
                  <phase>site</phase>
                  <configuration>
                    <target>
                      <copy todir="${project.build.directory}/site">
                        <fileset dir="${basedir}/../../target/site"/>
                      </copy>
                    </target>
                  </configuration>
                  <goals>
                    <goal>run</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
            -->
            <!-- Publish site folder to GitHub's gh-pages branch -->
            <plugin>
              <groupId>com.github.github</groupId>
              <artifactId>site-maven-plugin</artifactId>
              <configuration>
                <message>Creating site for ${project.version}</message>
                <path>${project.version}</path>
                <merge>true</merge>
                <!--<repositoryName>ugs-platform-updates</repositoryName>-->
                <repositoryName>gh-site-test</repositoryName>
                <repositoryOwner>winder</repositoryOwner>
              </configuration>
              <executions>
                <execution>
                  <goals>
                    <goal>site</goal>
                  </goals>
                  <phase>install</phase>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </build>
      </profile>
    </profiles>
</project>
