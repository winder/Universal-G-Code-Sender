/*
 * Copyright (C) 2023 Simone
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.willwinder.ugs.platform.plugin.plasma;

import com.willwinder.ugs.nbp.lib.lookup.CentralLookup;
import com.willwinder.universalgcodesender.firmware.FirmwareSetting;
import com.willwinder.universalgcodesender.firmware.FirmwareSettingsException;
import com.willwinder.universalgcodesender.listeners.ControllerState;
import com.willwinder.universalgcodesender.listeners.ControllerStatus;
import com.willwinder.universalgcodesender.listeners.UGSEventListener;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.UGSEvent;
import com.willwinder.universalgcodesender.model.events.ControllerStateEvent;
import com.willwinder.universalgcodesender.model.events.ControllerStatusEvent;
import com.willwinder.universalgcodesender.model.events.FirmwareSettingEvent;
import com.willwinder.universalgcodesender.model.events.SettingChangedEvent;
import com.willwinder.universalgcodesender.uielements.helpers.ThemeColors;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.willwinder.ugs.platform.plugin.plasma//PlasmaControl//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PlasmaControlTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.willwinder.ugs.platform.plugin.plasma.PlasmaControlTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PlasmaControlAction",
        preferredID = "PlasmaControlTopComponent"
)
@Messages({
    "CTL_PlasmaControlAction=PlasmaControl",
    "CTL_PlasmaControlTopComponent=PlasmaControl Window",
    "HINT_PlasmaControlTopComponent=This is a PlasmaControl window"
})
public final class PlasmaControlTopComponent 
        extends TopComponent
        implements UGSEventListener, ChangeListener, ItemListener {

    private final BackendAPI backend;
    
    public PlasmaControlTopComponent() {
        initComponents();
        setName("Plasma Control");
        //setToolTipText(Bundle.HINT_PlasmaControlTopComponent());
        
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        backend.addUGSEventListener(this);
        
        spinnerArcVoltageSetpoint.addChangeListener(this);
        checkboxThcEnabled.addItemListener(this);
        
        updateControls();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        labelTorchOn = new javax.swing.JLabel();
        labelArcOk = new javax.swing.JLabel();
        LabelUp = new javax.swing.JLabel();
        labelThc = new javax.swing.JLabel();
        labelDown = new javax.swing.JLabel();
        labelAntiDive = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelArcVoltage = new javax.swing.JLabel();
        checkboxThcEnabled = new javax.swing.JCheckBox();
        spinnerArcVoltageSetpoint = new javax.swing.JSpinner();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.jLabel1.text")); // NOI18N

        labelTorchOn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelTorchOn, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelTorchOn.text")); // NOI18N
        labelTorchOn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelTorchOn.setOpaque(true);

        labelArcOk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelArcOk, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelArcOk.text")); // NOI18N
        labelArcOk.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelArcOk.setOpaque(true);

        LabelUp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(LabelUp, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.LabelUp.text")); // NOI18N
        LabelUp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelUp.setOpaque(true);

        labelThc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelThc, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelThc.text")); // NOI18N
        labelThc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelThc.setOpaque(true);

        labelDown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelDown, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelDown.text")); // NOI18N
        labelDown.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelDown.setOpaque(true);

        labelAntiDive.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelAntiDive, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelAntiDive.text")); // NOI18N
        labelAntiDive.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelAntiDive.setOpaque(true);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.jLabel8.text")); // NOI18N
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        labelArcVoltage.setBackground(ThemeColors.VERY_DARK_GREY);
        labelArcVoltage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelArcVoltage.setForeground(ThemeColors.LIGHT_BLUE);
        labelArcVoltage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(labelArcVoltage, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.labelArcVoltage.text")); // NOI18N
        labelArcVoltage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelArcVoltage.setOpaque(true);

        org.openide.awt.Mnemonics.setLocalizedText(checkboxThcEnabled, org.openide.util.NbBundle.getMessage(PlasmaControlTopComponent.class, "PlasmaControlTopComponent.checkboxThcEnabled.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelArcVoltage, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(spinnerArcVoltageSetpoint)
                    .addComponent(checkboxThcEnabled, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(labelTorchOn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelArcOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelThc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelAntiDive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelArcVoltage, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerArcVoltageSetpoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkboxThcEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTorchOn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelArcOk, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelThc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelUp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDown, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelAntiDive, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelUp;
    private javax.swing.JCheckBox checkboxThcEnabled;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel labelAntiDive;
    private javax.swing.JLabel labelArcOk;
    private javax.swing.JLabel labelArcVoltage;
    private javax.swing.JLabel labelDown;
    private javax.swing.JLabel labelThc;
    private javax.swing.JLabel labelTorchOn;
    private javax.swing.JSpinner spinnerArcVoltageSetpoint;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void UGSEvent(UGSEvent evt) {
        if (evt instanceof ControllerStateEvent) {
            updateControls();
        } else if (evt instanceof FirmwareSettingEvent) {
            onFirmwareSettingsChangedReceived(((FirmwareSettingEvent) evt).getFirmwareSetting());
        } else if (evt instanceof ControllerStatusEvent) {
            onControllerStatusReceived(((ControllerStatusEvent) evt).getStatus());
        }
    }
    
    private void updateControls() {
        boolean enabled = backend.isConnected();
            
        if (!enabled) {
            labelArcVoltage.setText("--- V"); 
        }        
        
        spinnerArcVoltageSetpoint.setEnabled(enabled);
        checkboxThcEnabled.setEnabled(enabled);
        labelArcVoltage.setEnabled(enabled);
        labelTorchOn.setEnabled(enabled);
        labelArcOk.setEnabled(enabled);
        labelThc.setEnabled(enabled);
        LabelUp.setEnabled(enabled);
        labelDown.setEnabled(enabled);
        labelAntiDive.setEnabled(enabled);

    }

    private void onFirmwareSettingsChangedReceived(FirmwareSetting setting) {
        if ("$38".equals(setting.getKey())) {
            spinnerArcVoltageSetpoint.setValue(Integer.valueOf(setting.getValue()));
        }
        if ("$37".equals(setting.getKey())) {
            checkboxThcEnabled.setSelected("1".equalsIgnoreCase(setting.getValue()));
        }
    }
    
    private void onControllerStatusReceived(ControllerStatus status) {
        if (status != null && status.getPlasmaStates() != null)
        {
            ControllerStatus.PlasmaStates plasmaStates = status.getPlasmaStates();
            labelArcVoltage.setText(Math.round(plasmaStates.ArcVoltage) + " V");
            labelTorchOn.setBackground(plasmaStates.TorchOn ? Color.GREEN : Color.DARK_GRAY);
            labelTorchOn.setForeground(plasmaStates.TorchOn ? Color.DARK_GRAY : Color.GRAY);
            labelArcOk.setBackground(plasmaStates.ArcOk ? Color.GREEN : Color.DARK_GRAY);
            labelArcOk.setForeground(plasmaStates.ArcOk ? Color.DARK_GRAY : Color.GRAY);
            labelThc.setBackground(plasmaStates.ThcEnabled ? Color.GREEN : Color.DARK_GRAY);
            labelThc.setForeground(plasmaStates.ThcEnabled ? Color.DARK_GRAY : Color.GRAY);
            LabelUp.setBackground(plasmaStates.Up ? Color.GREEN : Color.DARK_GRAY);
            LabelUp.setForeground(plasmaStates.Up ? Color.DARK_GRAY : Color.GRAY);
            labelDown.setBackground(plasmaStates.Down ? Color.GREEN : Color.DARK_GRAY);
            labelDown.setForeground(plasmaStates.Down ? Color.DARK_GRAY : Color.GRAY);
            labelAntiDive.setBackground(plasmaStates.AntiDive ? Color.GREEN : Color.DARK_GRAY);   
            labelAntiDive.setForeground(plasmaStates.AntiDive ? Color.DARK_GRAY : Color.GRAY);
        }

    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() == spinnerArcVoltageSetpoint) {
            try {
                backend.getController().getFirmwareSettings().setValue("$38", String.valueOf(spinnerArcVoltageSetpoint.getValue()));
            } catch (FirmwareSettingsException ex) {
            }
        } 

    }   

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == checkboxThcEnabled) {
            try {
                backend.getController().getFirmwareSettings().setValue("$37", checkboxThcEnabled.isSelected()? "1" : "0");
            } catch (FirmwareSettingsException ex) {
            }     
        }
    }
    
}
